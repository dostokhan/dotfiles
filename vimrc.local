" spf13 overrides, unused from programming group
UnBundle 'scrooloose/syntastic' 
"disable indentation white spaces coloring
let g:indent_guides_enable_on_vim_startup = 0


" wrap long lines
set wrap linebreak nolist

set fileencoding=utf-8
set encoding=utf-8
set nofoldenable
set nospell
colorscheme gruvbox 
" colorscheme solarized
set nobackup
set noswapfile


" ##############################
" ### SHORTCUTS ######################
" ##############################
nnorema ; :
" clear highlighted search matches
nmap <slient> ,/ :nohlsearch<CR>
" for saving files which require root privileges"
cmap w!! w !sudo tee % >/dev/null


" ###################
" ### NerdCommenter #
" ###################
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'
let g:NERDTrimTraillingWhitespace=1
map <slient ,c :NERDTreeClose<CR>
map <leader>p :NERDTreeCWD

" ##############################
" ### COC ######################
" ##############################
"
" show definition
nnoremap <silent> K :call CocAction('doHover')<CR>
" show diagnostic
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
" navigate to errors
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" code action
nmap <leader>do <Plug>(coc-codeaction)


" automatically show either the diagnostic if it exists, otherwise the documentation 
" function! ShowDocIfNoDiagnostic(timer_id)
"   if (coc#util#has_float() == 0)
"     silent call CocActionAsync('doHover')
"   endif
" endfunction

" function! s:show_hover_doc()
"   call timer_start(500, 'ShowDocIfNoDiagnostic')
" endfunction

" autocmd CursorHoldI * :call <SID>show_hover_doc()
" autocmd CursorHold * :call <SID>show_hover_doc()

